# ============================================================================
# ENVIRONMENT CONFIGURATION
# Loan Default Prediction API - Production Security Settings
# ============================================================================

# ============================================================================
# APPLICATION ENVIRONMENT
# ============================================================================

# Environment: development, staging, production
NODE_ENV=production
PORT=5000
APP_NAME=Loan Prediction API
APP_VERSION=1.0.0
API_PREFIX=/api

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

DB_HOST=localhost
DB_PORT=5432
DB_NAME=loan_prediction_prod
DB_USER=loan_api_user
DB_PASSWORD=your_secure_database_password_here

# Database SSL (recommended for production)
DB_SSL=true

# Connection Pool Settings
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_MAX_CLIENTS=20
DB_IDLE_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=2000

# Alternative: Full Database URL
# DATABASE_URL=postgresql://user:password@host:5432/database?ssl=true

# ============================================================================
# JWT & AUTHENTICATION
# ============================================================================

# JWT Secret (minimum 32 characters, use strong random string)
# Generate with: openssl rand -base64 32
JWT_SECRET=your_jwt_secret_minimum_32_characters_use_openssl_rand
JWT_REFRESH_SECRET=your_refresh_secret_also_minimum_32_characters_different_from_above

# JWT Expiration
JWT_EXPIRES_IN=1h
JWT_REFRESH_EXPIRES_IN=7d
JWT_ISSUER=loan-prediction-api

# Bcrypt Rounds (10-12 recommended, higher = more secure but slower)
BCRYPT_ROUNDS=10

# Session Secret (different from JWT secrets)
SESSION_SECRET=your_session_secret_minimum_32_characters

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Production: Comma-separated list of allowed origins (NO SPACES)
CORS_ORIGIN=https://app.example.com,https://admin.example.com

# Development: Allow all origins or specific localhost ports
# CORS_ORIGIN=http://localhost:3000,http://localhost:8501

# Staging: Specific staging URLs
# CORS_ORIGIN=https://staging.example.com,https://test.example.com

# Allow credentials (cookies, authorization headers)
CORS_CREDENTIALS=true

# ============================================================================
# RATE LIMITING
# ============================================================================

# General API Rate Limit
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes in milliseconds
RATE_LIMIT_MAX_REQUESTS=100   # Max requests per window

# Note: Additional specific limiters configured in code:
# - Auth Endpoints: 5 requests per 15 minutes
# - Predictions: 10 requests per minute
# - Query Endpoints: 30 requests per minute
# - Account Creation: 3 accounts per hour per IP

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Trust Proxy (set to true when behind nginx, AWS ALB, Cloudflare, etc.)
# This is required for rate limiting by IP to work correctly
TRUST_PROXY=true

# IP Blacklist (comma-separated IPs to block)
# Example: IP_BLACKLIST=192.168.1.100,10.0.0.5,203.0.113.45
IP_BLACKLIST=

# Content Security Policy - Report URI
# CSP_REPORT_URI=https://your-domain.report-uri.com/r/d/csp/enforce

# ============================================================================
# LOGGING & MONITORING
# ============================================================================

# Log Level: error, warn, info, debug
LOG_LEVEL=info

# Log Format: json, combined, common, dev
LOG_FORMAT=json

# Log Directory
LOG_DIRECTORY=./logs

# Performance Monitoring Thresholds
SLOW_REQUEST_THRESHOLD=1000      # Log requests slower than 1000ms
LARGE_PAYLOAD_THRESHOLD=1048576  # Log payloads larger than 1MB (bytes)

# Enable/Disable Monitoring
MONITORING_ENABLED=true
METRICS_ENABLED=true

# ============================================================================
# MACHINE LEARNING MODEL
# ============================================================================

ML_MODEL_PATH=./models/loan_default_model.joblib
ML_SCALER_PATH=./models/scaler.joblib
ML_COLUMNS_PATH=./models/model_columns.json

# Python ML Service Configuration
ML_SERVICE_URL=http://localhost:8501/predict
PYTHON_PATH=python3
PREDICTION_TIMEOUT=30000  # milliseconds

# ============================================================================
# FILE UPLOAD CONFIGURATION
# ============================================================================

UPLOAD_MAX_SIZE=10485760  # 10MB in bytes
UPLOAD_ALLOWED_TYPES=application/pdf,image/jpeg,image/png,text/csv
UPLOAD_DIRECTORY=./uploads
FILE_SIZE_LIMIT=10mb

# ============================================================================
# EMAIL CONFIGURATION (optional)
# ============================================================================

EMAIL_ENABLED=false
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
EMAIL_SECURE=false  # true for 465, false for other ports
EMAIL_USER=noreply@example.com
EMAIL_PASSWORD=your_email_password
EMAIL_FROM=Loan Prediction API <noreply@example.com>

# ============================================================================
# EXTERNAL SERVICES (optional)
# ============================================================================

# Redis (for caching/sessions/rate limiting)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your_redis_password
# REDIS_TLS=false

# Sentry (error tracking & monitoring)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=production
# SENTRY_TRACES_SAMPLE_RATE=0.1

# AWS S3 (for file storage)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_REGION=us-east-1
# S3_BUCKET=loan-prediction-uploads

# ============================================================================
# DEVELOPMENT ENVIRONMENT OVERRIDES
# ============================================================================

# Uncomment these for local development:
# NODE_ENV=development
# CORS_ORIGIN=http://localhost:3000,http://localhost:8501
# TRUST_PROXY=false
# LOG_LEVEL=debug
# DB_SSL=false
# JWT_EXPIRES_IN=24h

# ============================================================================
# PRODUCTION DEPLOYMENT GUIDE
# ============================================================================

# 1. GENERATE SECURE SECRETS:
#    openssl rand -base64 32
#
# 2. NEVER COMMIT .env TO VERSION CONTROL
#    Add .env to .gitignore
#
# 3. USE ENVIRONMENT VARIABLES IN CI/CD:
#    - GitHub Actions: Repository Secrets
#    - AWS ECS/Lambda: Environment Variables
#    - AWS Secrets Manager: For sensitive data
#    - Azure: Key Vault
#    - Heroku: Config Vars
#    - Docker: docker-compose env_file
#    - Kubernetes: ConfigMaps & Secrets
#
# 4. ROTATE SECRETS REGULARLY
#    - Every 90 days for JWT secrets
#    - Immediately if compromised
#
# 5. USE DIFFERENT SECRETS FOR EACH ENVIRONMENT
#    Development, Staging, Production should have different values
#
# 6. ENABLE DATABASE SSL IN PRODUCTION
#    DB_SSL=true
#
# 7. SET TRUST_PROXY=true IF BEHIND REVERSE PROXY
#    Required for: nginx, AWS ALB/ELB, Cloudflare, etc.
#
# 8. CONFIGURE APPROPRIATE RATE LIMITS
#    Adjust based on expected traffic and server capacity
#
# 9. MONITOR LOGS REGULARLY
#    Set up alerts for security events
#
# 10. KEEP DEPENDENCIES UPDATED
#     Run: npm audit fix
#     Review: npm outdated

# ============================================================================
# SECURITY CHECKLIST
# ============================================================================

# [ ] JWT_SECRET is at least 32 characters and randomly generated
# [ ] JWT_REFRESH_SECRET is different from JWT_SECRET
# [ ] DB_PASSWORD is strong (20+ chars, mixed case, numbers, symbols)
# [ ] SESSION_SECRET is unique and different from JWT secrets
# [ ] CORS_ORIGIN is set to specific domains (not * in production)
# [ ] TRUST_PROXY is configured correctly for your infrastructure
# [ ] Rate limits are appropriate for expected traffic
# [ ] Logging is configured and monitored
# [ ] All secrets are stored securely (not in code or version control)
# [ ] Database SSL is enabled (DB_SSL=true)
# [ ] HTTPS is configured in reverse proxy (nginx/ALB)
# [ ] NODE_ENV is set to 'production'
# [ ] IP_BLACKLIST is configured if needed
# [ ] File upload limits are reasonable (UPLOAD_MAX_SIZE)
# [ ] Error logging excludes sensitive data
# [ ] Monitoring and alerting are set up

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================

# To test security features locally:
# 1. Rate limiting: Use curl or Postman to exceed limits
# 2. XSS protection: Send requests with <script> tags
# 3. SQL injection: Send requests with SQL keywords
# 4. CORS: Test from different origins
# 5. Metrics: Check /health endpoint for statistics

# ============================================================================
# REVERSE PROXY CONFIGURATION (nginx example)
# ============================================================================

# If using nginx, configure:
# - HTTPS/TLS certificates
# - proxy_set_header X-Real-IP $remote_addr;
# - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# - proxy_set_header X-Forwarded-Proto $scheme;
# - client_max_body_size (match UPLOAD_MAX_SIZE)

# ============================================================================
# END OF CONFIGURATION
# ============================================================================
